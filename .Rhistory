variation<-function(selectedPoints, model)
{
if (length(selectedPoints$x) == 1) {
selectedPoints<-mutation(selectedPoints)
}
else {
afterCrossover<-crossover(selectedPoints[1,], selectedPoints[2,] )
selectedPoints<-mutation(afterCrossover)
}
return (selectedPoints)
}
crossover<-function(parent1, parent2)
{
a<-runif(1)
parent1$x<-a*parent1$x+(1-a)*parent2$x
parent1$y<-a*parent1$y+(1-a)*parent2$y
parent1$sigma_x<-a*parent1$sigma_x+(1-a)*parent2$sigma_x
parent1$sigma_y<-a*parent1$sigma_y+(1-a)*parent2$sigma_y
return (parent1)
}
mutation<-function(point)
{
epsilon <- runif(1, -1, 1)
epsilonX <- runif(1, -1, 1)
epsilonY <- runif(1, -1, 1)
vX <- runif(1, -1, 1)
vY <- runif(1, -1, 1)
rA <- 1/(1/sqrt(4))
rB <- 1/(1/sqrt(2*sqrt(2)))
point$sigma_x <- point$sigma_x*exp(rA*epsilon + rB*epsilonX)
point$sigma_y <- point$sigma_y*exp(rA*epsilon + rB*epsilonY)
point$x <- point$x + point$sigma_x*vX
point$y <- point$y + point$sigma_y*vY
if (point$x < -512) {
point$x<-(-512)
}
if (point$x > 512) {
point$x<-512
}
if (point$y < -512) {
point$y<-(-512)
}
if (point$y > 512) {
point$y<-512
}
return (point)
}
## particle swarm
## antlion
## the engine
aggregatedOperator<-function(history, oldModel)
{
selectedPoints<-select(history, oldModel)
newModel<-modelUpdate(selectedPoints, oldModel)
print(length(newModel$x))
newPoints<-variation(selectedPoints, newModel)
return (list(newPoints=newPoints,newModel=newModel))
}
metaheuristicRun<-function(initialization, startPoints, termination, evaluation)
{
history<-initialization(startPoints)
history<-evaluateList(history, evaluation)
model<-initModel(history)
i<-1
while (!termination(i,5))
{
i<-i+1
aa<-aggregatedOperator(history, model)
aa$newPoints<-evaluateList(aa$newPoints, evaluation)
history<-aa$newModel
history<-historyPush(history,aa$newPoints)
model<-aa$newModel
}
return(history)
}
historyPush<-function(oldHistory, newPoints)
{
newHistory <- rbind(oldHistory, data.frame(sigma_x = newPoints$sigma_x, sigma_y = newPoints$sigma_y, x= newPoints$x, y = newPoints$y) )
return (newHistory)
}
historyPop<-function(history, number)
{
stop=length(history)
start=max(stop-number+1,1)
return(history[start:stop])
}
evaluateList<-function(points,evaluation)
{
for (i in 1:length(points$x)) {
points$quality[[i]]<-evaluation(points$x[[i]], points$y[[i]])
}
return (points)
}
#commonFunctions
mi<-100
generateStartPoints<-function(mi)
{
startPoints<-data.frame(sigma_x=numeric(mi), sigma_y=numeric(mi), x=numeric(mi), y=numeric(mi))
for (i in 1:mi)
{
startPoints$x[i]<-runif(1, -512, 512)
startPoints$y[i]<-runif(1, -512, 512)
startPoints$sigma_x[i]<-0.2
startPoints$sigma_y[i]<-0.2
}
return (startPoints)
}
termination<-function(i, n)
{
if (i <= n) {
return (F)
}
else {
return (T)
}
}
evaluation<-function(x, y)
{
return(x^2 + y^2)
}
initialization<-function(points)
{
historyPoints<-data.frame(points)
return (historyPoints)
}
initModel<-function(points)
{
historyPoints<-data.frame(points)
return (historyPoints)
}
########## main funtion
library(ggplot2)
startPoints<-generateStartPoints(mi)
prawdopodobienstwo<-0.5
objectx<-metaheuristicRun(initialization, startPoints, termination, evaluation)
print(qplot(seq_along(objectx$x), objectx$quality))
#bla<-termination(3,2)
## evolutionary
select<-function(history, model)
{
a<-runif(1)
usedValues <- vector(mode="numeric", length=0)
if (a < prawdopodobienstwo) {
sigma_x<-vector(mode="double", length=0)
sigma_y<-vector(mode="double", length=0)
x<-vector(mode="double", length=0)
y<-vector(mode="double", length=0)
for (i in 1:2) {
if (vector.is.empty(usedValues)) {
j <- sample(1:length(history$x), 1)
usedValues<-c(usedValues, j)
sigma_x<-c(sigma_x, history$sigma_x[j])
sigma_y<-c(sigma_y, history$sigma_y[j])
x<-c(x, history$x[j])
y<-c(y, history$y[j])
} else {
while (is.element(j,usedValues) ) {
j <- sample(1:length(history$x), 1)
}
usedValues<-c(usedValues, j)
sigma_x<-c(sigma_x, history$sigma_x[j])
sigma_y<-c(sigma_y, history$sigma_y[j])
x<-c(x, history$x[j])
y<-c(y, history$y[j])
}
}
temp<-data.frame(sigma_x=sigma_x, sigma_y=sigma_y, x=x, y=y)
} else {
j <- sample(1:length(history$x), 1)
usedValues<-c(usedValues, j)
temp<-data.frame(sigma_x=history$sigma_x[j], sigma_y=history$sigma_y[j], x=history$x[j], y=history$y[j])
}
return (temp)
}
vector.is.empty <- function(x)
return(length(x) ==0 )
modelUpdate<-function(selectedPoints, oldModel)
{
print(oldModel)
for (i in 1:length(selectedPoints$x)) {
oldModel<-oldModel[-(oldModel$x == selectedPoints$x[i]),]
#oldModel<-oldModel[- selectedPoints$x[i] ,]
}
print("old model")
print(oldModel)
return (oldModel)
}
variation<-function(selectedPoints, model)
{
if (length(selectedPoints$x) == 1) {
selectedPoints<-mutation(selectedPoints)
}
else {
afterCrossover<-crossover(selectedPoints[1,], selectedPoints[2,] )
selectedPoints<-mutation(afterCrossover)
}
return (selectedPoints)
}
crossover<-function(parent1, parent2)
{
a<-runif(1)
parent1$x<-a*parent1$x+(1-a)*parent2$x
parent1$y<-a*parent1$y+(1-a)*parent2$y
parent1$sigma_x<-a*parent1$sigma_x+(1-a)*parent2$sigma_x
parent1$sigma_y<-a*parent1$sigma_y+(1-a)*parent2$sigma_y
return (parent1)
}
mutation<-function(point)
{
epsilon <- runif(1, -1, 1)
epsilonX <- runif(1, -1, 1)
epsilonY <- runif(1, -1, 1)
vX <- runif(1, -1, 1)
vY <- runif(1, -1, 1)
rA <- 1/(1/sqrt(4))
rB <- 1/(1/sqrt(2*sqrt(2)))
point$sigma_x <- point$sigma_x*exp(rA*epsilon + rB*epsilonX)
point$sigma_y <- point$sigma_y*exp(rA*epsilon + rB*epsilonY)
point$x <- point$x + point$sigma_x*vX
point$y <- point$y + point$sigma_y*vY
if (point$x < -512) {
point$x<-(-512)
}
if (point$x > 512) {
point$x<-512
}
if (point$y < -512) {
point$y<-(-512)
}
if (point$y > 512) {
point$y<-512
}
return (point)
}
## particle swarm
## antlion
## the engine
aggregatedOperator<-function(history, oldModel)
{
selectedPoints<-select(history, oldModel)
newModel<-modelUpdate(selectedPoints, oldModel)
print(length(newModel$x))
newPoints<-variation(selectedPoints, newModel)
return (list(newPoints=newPoints,newModel=newModel))
}
metaheuristicRun<-function(initialization, startPoints, termination, evaluation)
{
history<-initialization(startPoints)
history<-evaluateList(history, evaluation)
model<-initModel(history)
i<-1
while (!termination(i,5))
{
i<-i+1
aa<-aggregatedOperator(history, model)
aa$newPoints<-evaluateList(aa$newPoints, evaluation)
history<-aa$newModel
history<-historyPush(history,aa$newPoints)
model<-aa$newModel
}
return(history)
}
historyPush<-function(oldHistory, newPoints)
{
newHistory <- rbind(oldHistory, data.frame(sigma_x = newPoints$sigma_x, sigma_y = newPoints$sigma_y, x= newPoints$x, y = newPoints$y) )
return (newHistory)
}
historyPop<-function(history, number)
{
stop=length(history)
start=max(stop-number+1,1)
return(history[start:stop])
}
evaluateList<-function(points,evaluation)
{
for (i in 1:length(points$x)) {
points$quality[[i]]<-evaluation(points$x[[i]], points$y[[i]])
}
return (points)
}
#commonFunctions
mi<-100
generateStartPoints<-function(mi)
{
startPoints<-data.frame(sigma_x=numeric(mi), sigma_y=numeric(mi), x=numeric(mi), y=numeric(mi))
for (i in 1:mi)
{
startPoints$x[i]<-runif(1, -512, 512)
startPoints$y[i]<-runif(1, -512, 512)
startPoints$sigma_x[i]<-0.2
startPoints$sigma_y[i]<-0.2
}
return (startPoints)
}
termination<-function(i, n)
{
if (i <= n) {
return (F)
}
else {
return (T)
}
}
evaluation<-function(x, y)
{
return(x^2 + y^2)
}
initialization<-function(points)
{
historyPoints<-data.frame(points)
return (historyPoints)
}
initModel<-function(points)
{
historyPoints<-data.frame(points)
return (historyPoints)
}
########## main funtion
library(ggplot2)
startPoints<-generateStartPoints(mi)
prawdopodobienstwo<-0.5
objectx<-metaheuristicRun(initialization, startPoints, termination, evaluation)
print(qplot(seq_along(objectx$x), objectx$quality))
#bla<-termination(3,2)
## evolutionary
select<-function(history, model)
{
a<-runif(1)
usedValues <- vector(mode="numeric", length=0)
if (a < prawdopodobienstwo) {
sigma_x<-vector(mode="double", length=0)
sigma_y<-vector(mode="double", length=0)
x<-vector(mode="double", length=0)
y<-vector(mode="double", length=0)
for (i in 1:2) {
if (vector.is.empty(usedValues)) {
j <- sample(1:length(history$x), 1)
usedValues<-c(usedValues, j)
sigma_x<-c(sigma_x, history$sigma_x[j])
sigma_y<-c(sigma_y, history$sigma_y[j])
x<-c(x, history$x[j])
y<-c(y, history$y[j])
} else {
while (is.element(j,usedValues) ) {
j <- sample(1:length(history$x), 1)
}
usedValues<-c(usedValues, j)
sigma_x<-c(sigma_x, history$sigma_x[j])
sigma_y<-c(sigma_y, history$sigma_y[j])
x<-c(x, history$x[j])
y<-c(y, history$y[j])
}
}
temp<-data.frame(sigma_x=sigma_x, sigma_y=sigma_y, x=x, y=y)
} else {
j <- sample(1:length(history$x), 1)
usedValues<-c(usedValues, j)
temp<-data.frame(sigma_x=history$sigma_x[j], sigma_y=history$sigma_y[j], x=history$x[j], y=history$y[j])
}
return (temp)
}
vector.is.empty <- function(x)
return(length(x) ==0 )
modelUpdate<-function(selectedPoints, oldModel)
{
print(oldModel)
for (i in 1:length(selectedPoints$x)) {
oldModel<-oldModel[-(oldModel$x == selectedPoints$x[i]),]
#oldModel<-oldModel[- selectedPoints$x[i] ,]
}
print("old model")
print(oldModel)
return (oldModel)
}
variation<-function(selectedPoints, model)
{
if (length(selectedPoints$x) == 1) {
selectedPoints<-mutation(selectedPoints)
}
else {
afterCrossover<-crossover(selectedPoints[1,], selectedPoints[2,] )
selectedPoints<-mutation(afterCrossover)
}
return (selectedPoints)
}
crossover<-function(parent1, parent2)
{
a<-runif(1)
parent1$x<-a*parent1$x+(1-a)*parent2$x
parent1$y<-a*parent1$y+(1-a)*parent2$y
parent1$sigma_x<-a*parent1$sigma_x+(1-a)*parent2$sigma_x
parent1$sigma_y<-a*parent1$sigma_y+(1-a)*parent2$sigma_y
return (parent1)
}
mutation<-function(point)
{
epsilon <- runif(1, -1, 1)
epsilonX <- runif(1, -1, 1)
epsilonY <- runif(1, -1, 1)
vX <- runif(1, -1, 1)
vY <- runif(1, -1, 1)
rA <- 1/(1/sqrt(4))
rB <- 1/(1/sqrt(2*sqrt(2)))
point$sigma_x <- point$sigma_x*exp(rA*epsilon + rB*epsilonX)
point$sigma_y <- point$sigma_y*exp(rA*epsilon + rB*epsilonY)
point$x <- point$x + point$sigma_x*vX
point$y <- point$y + point$sigma_y*vY
if (point$x < -512) {
point$x<-(-512)
}
if (point$x > 512) {
point$x<-512
}
if (point$y < -512) {
point$y<-(-512)
}
if (point$y > 512) {
point$y<-512
}
return (point)
}
## particle swarm
## antlion
## the engine
aggregatedOperator<-function(history, oldModel)
{
selectedPoints<-select(history, oldModel)
newModel<-modelUpdate(selectedPoints, oldModel)
print(length(newModel$x))
newPoints<-variation(selectedPoints, newModel)
return (list(newPoints=newPoints,newModel=newModel))
}
metaheuristicRun<-function(initialization, startPoints, termination, evaluation)
{
history<-initialization(startPoints)
history<-evaluateList(history, evaluation)
model<-initModel(history)
i<-1
while (!termination(i,5))
{
i<-i+1
aa<-aggregatedOperator(history, model)
aa$newPoints<-evaluateList(aa$newPoints, evaluation)
history<-aa$newModel
history<-historyPush(history,aa$newPoints)
model<-aa$newModel
}
return(history)
}
historyPush<-function(oldHistory, newPoints)
{
newHistory <-c(oldHistory, data.frame(sigma_x=newPoints$sigma_x, sigma_y=newPoints$sigma_y, x=newPoints$x, y=newPoints$y ) )
return (newHistory)
}
historyPop<-function(history, number)
{
stop=length(history)
start=max(stop-number+1,1)
return(history[start:stop])
}
evaluateList<-function(points,evaluation)
{
for (i in 1:length(points$x)) {
points$quality[[i]]<-evaluation(points$x[[i]], points$y[[i]])
}
return (points)
}
#commonFunctions
mi<-100
generateStartPoints<-function(mi)
{
startPoints<-data.frame(sigma_x=numeric(mi), sigma_y=numeric(mi), x=numeric(mi), y=numeric(mi))
for (i in 1:mi)
{
startPoints$x[i]<-runif(1, -512, 512)
startPoints$y[i]<-runif(1, -512, 512)
startPoints$sigma_x[i]<-0.2
startPoints$sigma_y[i]<-0.2
}
return (startPoints)
}
termination<-function(i, n)
{
if (i <= n) {
return (F)
}
else {
return (T)
}
}
evaluation<-function(x, y)
{
return(x^2 + y^2)
}
initialization<-function(points)
{
historyPoints<-data.frame(points)
return (historyPoints)
}
initModel<-function(points)
{
historyPoints<-data.frame(points)
return (historyPoints)
}
########## main funtion
library(ggplot2)
startPoints<-generateStartPoints(mi)
prawdopodobienstwo<-0.5
objectx<-metaheuristicRun(initialization, startPoints, termination, evaluation)
print(qplot(seq_along(objectx$x), objectx$quality))
#bla<-termination(3,2)
objectx
